@using System.Web.Optimization
@using Docller
@using Docller.Common
@using Docller.Core.Models
@using File = Docller.Core.Models.File
@model Docller.Models.TransmittalViewModel

@{
    ViewBag.Title = "CreateTransmital";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
}

@section AdditionalHeader{
    @Styles.Render(StyleBundles.FileRegisterBundle)
    @Styles.Render(StyleBundles.Select2Bundle)
}

<div id="container-noSplitter" class="filecontainer">
    
        <div class="pull-right">
            <a class="btn" data-toggle="modal" href="/Project/InviteUsers/@ViewContext.GetCurrentProjectId()" data-target="#userModal"><i class="icon-user"></i> Invite ...</a>
        </div>
        <div class="clearfix"></div>
        @if (ViewBag.TransmittalSaved != null)
        {
            <div class="alert alert-success">
                Transmittal Saved
            </div>
        }
        
        
        @using (Html.BeginForm("NewTransmittal", "Project", new {ProjectId = ViewContext.GetCurrentProjectId()}, FormMethod.Post, new {id = "editFilesForm"}))
        {
            <div class="row-fluid">
                <div class="span12">
                    <div class="span8">
                        <input type="hidden" id="TransmittalId" name="TransmittalId" value="@Model.TransmittalId" />
            
                        <div class="row-fluid">
                            <div class="span4">
                                <label>Transmittal# </label>
                                @Html.TextBoxFor(x=>x.TransmittalNumber,new{@class="span4"})
                                @Html.ValidationMessageFor(m => m.TransmittalNumber, "Please provide a transmittal number", new { @class = "label label-important dc-whitecolor" })
                            </div>
                        </div>
                        <div class="row-fluid">
                            <div class="span8">
                                <label>Subject </label>
                                @Html.TextBoxFor(x=>x.Subject,new{@class="span8"})
                                @Html.ValidationMessageFor(m => m.Subject, "Please provide a subject", new { @class = "label label-important dc-whitecolor" })
                            </div>
                        </div>
                        <div class="row-fluid">
                            <div class="span6">
                                <label>To </label> 
                                @Html.HiddenFor(x=>x.To,new{style="width:88.717948717948715%;"})
                                @Html.ValidationMessageFor(m=>m.To, "To is required for Transmittal", new { @class = "label label-important dc-whitecolor" })
                    
                            </div>
                        </div>
                        <div class="row-fluid">
                            <div class="span6">
                                <label>Cc </label> 
                                @Html.HiddenFor(x=>x.Cc,new{style="width:88.717948717948715%;"})
                            </div>
                        </div>
                        <div class="row-fluid">
                            <div class="span6 dc-controlRow">
                                <label>Status </label>
                                @Html.DropDownList("StatusId",Model.StatusList)
                                @Html.ValidationMessageFor(m=>m.StatusId, "Status is required for Transmittal", new { @class = "label label-important dc-whitecolor" })
                            </div>
                        </div>
                        <div class="row-fluid">
                            <div class="span12">
                                <label>Message </label>
                                @Html.TextAreaFor(x=>x.Message,new{rows="10", @class="span8"})
                            </div>
                        </div>
                    </div>
                
                    <div class="span4 transmittalFiles">
                        <table class="table table-striped table-bordered table-condensed" id="filesTable">
                            <thead>
                                <tr>
                                    <th>File/Document #</th>
                                    <th>Revision</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: files">
                                <tr>
                                    <td data-bind="text: fileName"></td>
                                    <td data-bind="text: revision"></td>  
                                    <td  style="width: 16px;">
                                        <a href="#" title="Remove" data-bind="click: $root.removeFile"><i class="icon-remove-sign"></i></a>
                                        <input type="hidden" name="FileId" id="FileId" data-bind="value: fileId"/>
                                        <input type="hidden" name="FileName" id="FileName" data-bind="value: fileName"/>
                                        <input type="hidden" name="Title" id="Title" data-bind="value: title"/>
                                        <input type="hidden" name="Revision" id="Revision" data-bind="value: revision"/>
                                    </td>
                                </tr>
                    
                    
                                <script type="text/javascript">
                                    @(Model.TransmittedFiles != null ? Html.Raw(string.Format("docller.transmittalFiles = {0};", Model.FileJson)) : Html.Raw("docller.transmittalFiles = [];"))
                                </script>
                                @*     foreach (TransmittedFile file in Model.TransmittedFiles)
                        {
                            <tr id="remove-@file.FileId">
                                <td>@file.FileName @Html.Hidden("FileName", file.FileName) </td>
                                <td>@file.Title @Html.Hidden("Title", file.Title)</td>  
                                <td>@file.Revision @Html.Hidden("Revision", file.Revision)</td>  
                                <td  style="width: 16px;">
                                    @if (Model.TransmittedFiles.Count > 1)
                                    {

                                        <a href="#" data-removefileid="@file.FileId" title="Remove @file.FileName"><i class="icon-remove-sign"></i></a>
                                    }
                                    @Html.Hidden("FileId", file.FileId) 
                                </td>
                            
                            </tr>
                        }*@
                    
                            </tbody>
                        </table>
                         <div class="page-header">
                            @Html.HiddenFor(m=>m.FileCount)
                            @Html.ValidationMessageFor(m=>m.FileCount, "You must add files to your transmittal", new { @class = "label label-important dc-whitecolor" })
                            <div>
                                <a class="btn"  data-toggle="filePicker" href="@Url.Action("FileRegister",new {projectId=ViewContext.GetCurrentProjectId(), showAsPicker=true})" 
                                   data-target="#filesModal"><i class="icon-file"></i>Add / Update Files ...</a>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                  
                    @Html.Hidden("ToText", Model.To.ToTextString())
                    @Html.Hidden("CcText", Model.Cc.ToTextString())
                </div>
                <div class="clearfix"></div>
                <div class="pull-right">
                    <button class="btn btn-inverse" type="submit" id="saveTransmittal" name="saveTransmittal"><i class="icon-check icon-white"></i> Save for later</button>
                    <button class="btn btn-inverse" type="submit" id="transmit" name="transmit">Transmit <i class="icon-arrow-right icon-white"></i></button>
                    
                </div>
            </div>
        }
    </div>


<div id="filesModal" class="widemodal hide" role="dialog">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3>File Register</h3>
                </div>
    <div class="modal-body">
        
    </div>
     <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
                <button type="submit" class="btn btn-primary" id="selectfiles">Add Selectedd Files ...</button>
            </div>
                
</div>



@section AdditionalFooter{
            @Scripts.Render(ScriptBundles.KnockoutBundle)
            @Scripts.Render(ScriptBundles.ValidationBundle)
            @Scripts.Render(ScriptBundles.TransmittalBundle)
        }